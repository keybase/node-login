// Generated by IcedCoffeeScript 110.0.0
(function() {
  var Auth, do_post, get_salt, iced, json_endpoint, kbpgp, login, make_esc, make_sig, post_login, request, strech_passphrase, triplesec;

  iced = require('iced-runtime-3');

  kbpgp = require('kbpgp');

  triplesec = require('triplesec');

  request = require('request');

  make_esc = require('iced-error').make_esc;

  Auth = require('keybase-proofs').Auth;

  json_endpoint = function(w) {
    return "https://keybase.io/_/api/1.0/" + w + ".json";
  };

  do_post = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, endpoint, form;
    endpoint = arg.endpoint, form = arg.form;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var body, err, esc, response;
      return function*() {
        var __iced_deferrals;
        esc = make_esc(cb, "do_post");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: do_post>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        request.post({
          uri: json_endpoint(endpoint),
          form: form,
          json: true
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              response = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 14
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        err = null;
        if (body.status.code !== 0) {
          err = new Error("from " + endpoint + ": non-0 status " + (JSON.stringify(body.status)));
        }
        return cb(err, body, response);
      };
    })(this)();
    return __iced_it.next();
  };

  get_salt = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, email, username;
    username = arg.username, email = arg.email;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var body, esc, ret;
      return function*() {
        var __iced_deferrals;
        esc = make_esc(cb, "get_salt");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: get_salt>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        do_post({
          endpoint: "getsalt",
          form: {
            email_or_username: email || username,
            pdpka_login: true
          },
          json: true
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return body = arguments[0];
            };
          })(),
          lineno: 28
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        ret = {
          salt: new Buffer(body.salt, 'hex'),
          session: body.login_session
        };
        return cb(null, ret);
      };
    })(this)();
    return __iced_it.next();
  };

  strech_passphrase = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, passphrase, salt;
    salt = arg.salt, passphrase = arg.passphrase;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var encryptor, esc, extra;
      return function*() {
        var __iced_deferrals;
        esc = make_esc(cb, "make_keys");
        encryptor = new triplesec.Encryptor({
          key: new Buffer(passphrase, "utf8")
        });
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: strech_passphrase>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        encryptor.resalt({
          salt: salt,
          extra_keymaterial: 96
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return extra = arguments[0].extra;
            };
          })(),
          lineno: 37
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        return cb(null, {
          key4: extra.slice(32, 64),
          key5: extra.slice(64, 96)
        });
      };
    })(this)();
    return __iced_it.next();
  };

  make_sig = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, email, key, session, username;
    key = arg.key, email = arg.email, username = arg.username, session = arg.session;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var auth, esc, nonce, sig, signer;
      return function*() {
        var __iced_deferrals, __iced_deferrals1, __iced_deferrals2;
        esc = make_esc(cb, "make_sig");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: make_sig>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        kbpgp.rand.SRF().random_bytes(16, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return nonce = arguments[0];
            };
          })(),
          lineno: 42
        }));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        __iced_deferrals1 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: make_sig>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        kbpgp.kb.KeyManager.generate({
          seed: key
        }, esc(__iced_deferrals1.defer({
          assign_fn: (function() {
            return function() {
              return signer = arguments[0];
            };
          })(),
          lineno: 43
        })));
        if (__iced_deferrals1.await_exit()) {
          yield;
        }
        auth = new Auth({
          sig_eng: signer.make_sig_eng(),
          host: "keybase.io",
          user: {
            local: {
              email: email,
              username: username
            }
          },
          session: session,
          nonce: nonce
        });
        __iced_deferrals2 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: make_sig>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        auth.generate(esc(__iced_deferrals2.defer({
          assign_fn: (function() {
            return function() {
              return sig = arguments[0];
            };
          })(),
          lineno: 54
        })));
        if (__iced_deferrals2.await_exit()) {
          yield;
        }
        return cb(null, sig.armored);
      };
    })(this)();
    return __iced_it.next();
  };

  post_login = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, email, pdpka4, pdpka5, username;
    username = arg.username, email = arg.email, pdpka4 = arg.pdpka4, pdpka5 = arg.pdpka5;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var body, esc, res, response;
      return function*() {
        var __iced_deferrals;
        esc = make_esc(cb, "post_login");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: post_login>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        do_post({
          endpoint: "login",
          form: {
            pdpka4: pdpka4,
            pdpka5: pdpka5,
            email_or_username: email || username
          }
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              body = arguments[0];
              return response = arguments[1];
            };
          })(),
          lineno: 65
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        res = {
          uid: body.uid,
          session: body.session,
          csrf_token: body.csrf_token,
          cookies: response.headers["set-cookie"],
          me: body.me
        };
        return cb(null, res);
      };
    })(this)();
    return __iced_it.next();
  };

  exports.login = login = function(arg, cb) {
    var __iced_it, __iced_passed_deferral, email, passphrase, username;
    username = arg.username, email = arg.email, passphrase = arg.passphrase;
    __iced_passed_deferral = iced.findDeferral(arguments);
    __iced_it = (function(_this) {
      var esc, key4, key5, pdpka4, pdpka5, res, salt, session;
      return function*() {
        var __iced_deferrals, __iced_deferrals1, __iced_deferrals2, __iced_deferrals3, __iced_deferrals4;
        esc = make_esc(cb, "login");
        __iced_deferrals = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: login>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        get_salt({
          username: username,
          email: email
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              salt = arguments[0].salt;
              return session = arguments[0].session;
            };
          })(),
          lineno: 76
        })));
        if (__iced_deferrals.await_exit()) {
          yield;
        }
        __iced_deferrals1 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: login>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        strech_passphrase({
          salt: salt,
          passphrase: passphrase
        }, esc(__iced_deferrals1.defer({
          assign_fn: (function() {
            return function() {
              key4 = arguments[0].key4;
              return key5 = arguments[0].key5;
            };
          })(),
          lineno: 77
        })));
        if (__iced_deferrals1.await_exit()) {
          yield;
        }
        __iced_deferrals2 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: login>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        make_sig({
          key: key4,
          email: email,
          username: username,
          session: session
        }, esc(__iced_deferrals2.defer({
          assign_fn: (function() {
            return function() {
              return pdpka4 = arguments[0];
            };
          })(),
          lineno: 78
        })));
        if (__iced_deferrals2.await_exit()) {
          yield;
        }
        __iced_deferrals3 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: login>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        make_sig({
          key: key5,
          email: email,
          username: username,
          session: session
        }, esc(__iced_deferrals3.defer({
          assign_fn: (function() {
            return function() {
              return pdpka5 = arguments[0];
            };
          })(),
          lineno: 79
        })));
        if (__iced_deferrals3.await_exit()) {
          yield;
        }
        __iced_deferrals4 = new iced.Deferrals(__iced_it, {
          parent: __iced_passed_deferral,
          funcname: "<anonymous: login>",
          filename: "/Users/max/src/keybase/node-login/src/login.iced"
        });
        post_login({
          username: username,
          email: email,
          pdpka4: pdpka4,
          pdpka5: pdpka5
        }, esc(__iced_deferrals4.defer({
          assign_fn: (function() {
            return function() {
              return res = arguments[0];
            };
          })(),
          lineno: 80
        })));
        if (__iced_deferrals4.await_exit()) {
          yield;
        }
        return cb(null, res);
      };
    })(this)();
    return __iced_it.next();
  };

}).call(this);
